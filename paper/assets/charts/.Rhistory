latitudes * longitudes)
)
# Load the corresponding tile.
load(paste(directory, lat, "_", lng, ".RData", sep=""))
dimnames(values)[[1]][lat] <- tile.latitude
dimnames(values)[[2]][lng] <- tile.longitude
# Collect the data required to calculate the WBGT.
print("Collecting data...")
temperatures <- numeric(length(datetimes.posix))
humidities <- numeric(length(datetimes.posix))
m.winds <- numeric(length(datetimes.posix))
z.winds <- numeric(length(datetimes.posix))
radiations <- numeric(length(datetimes.posix))
i <- 1
for (year in as.character(years)) {
for (month in as.character(months)) {
for (day in as.character(days)) {
for (hour in as.character(hours)) {
temperatures[i] <- tile.hourly[year, month, day, hour, "T2M"]
humidities[i] <- tile.hourly[year, month, day, hour, "HU2M"] * 100
m.winds[i] <- tile.hourly[year, month, day, hour, "MER10M"]
z.winds[i] <- tile.hourly[year, month, day, hour, "MER10M"]
radiations[i] <- tile.hourly[year, month, day, hour, "SWD"]
i <- i + 1
}
}
}
}
# Calculate the dewpoint temperatures.
print("Calculating dewpoint temperature...")
dw_temperatures <- humidity.to.dewpoint(t = temperatures,
rh = humidities,
temperature.metric = "celsius")
# Calculate the WBGT value.
print("Calculating WBGT...")
wbgt <- wbgt.Liljegren(tas = temperatures,
dewp = dw_temperatures,
wind = sqrt(z.winds * z.winds + m.winds * m.winds),
radiation = radiations,
lon = tile.longitude,
lat = tile.latitude,
dates = datetimes.posix,
hour = TRUE)
# Keep only the maximal value per day.
daily.max <- data.frame(data_max = tapply(wbgt$data, dates, max))
# Store the value.
print("Storing values...")
for (i in 1:length(daily.max[[1]])) {
# Split the date string.
date_split <- strsplit(names(daily.max$data_max[i]), "-")[[1]]
# Get the value.
value <- daily.max$data_max[[i]]
# Append the value into the values.
values[1, 1, date_split[1], as.numeric(date_split[2]), as.character(as.numeric(date_split[3]))] <- value
}
# Cleanup the environment.
remove(tile.daily, tile.hourly, tile.latitude, tile.longitude)
}
}
values
values[1, 1]
values[1, 1, , ,]
values[1, 1, "2010", ,]
values[1, 1, "2010", "Feb",]
load("/media/pieter/data/karel/wbgt-data.RData")
values
# Load libraries.
require(assertthat)
require(HeatStress)
require(weathermetrics)
# Configure the data.
output <- "/media/pieter/data/karel/wbgt-data.RData"
directory <- "/media/pieter/data/karel/split/"
latitudes <- 1
longitudes <- 1
# Create the datetimes.
years <- seq(1981, 2010)
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep",
"Oct", "Nov", "Dec")
days <- seq(1, 31)
hours <- seq(10, 17)
datetimes <- numeric(length(years) * length(months) * length(days) * length(hours))
i <- 1
for (year in years) {
for (month in 1:length(months)) {
for (day in days) {
for (hour in hours) {
datetimes[i] <- sprintf('%d-%02d-%02d %d:00:00', year, month, day, hour)
i <- i + 1
}
}
}
}
datetimes.posix <- as.POSIXct(strptime(datetimes, "%Y-%m-%d %H:%M:%S", tz = "GMT"))
dates <- as.character(as.Date(datetimes))
# Cleanup the environment.
remove(datetimes, day, hour, i, month, year)
# Create an array to store the calculated values in.
values <- array(data=rep(NA),
dim=c(latitudes, longitudes, length(years), length(months), length(days)))
dimnames(values)[1] <- list(as.character(seq(1:latitudes)))
dimnames(values)[2] <- list(as.character(seq(1:longitudes)))
dimnames(values)[[3]] <- as.character(years)
dimnames(values)[[4]] <- as.character(months)
dimnames(values)[[5]] <- as.character(days)
# Iterate over the latitudes.
for (lat in 1:latitudes) {
# Iterate over the longitudes.
for (lng in 1:longitudes) {
print(paste("Progress:",
((lat-1) * (longitudes)) + lng,
"/",
latitudes * longitudes)
)
# Load the corresponding tile.
load(paste(directory, lat, "_", lng, ".RData", sep=""))
dimnames(values)[[1]][lat] <- tile.latitude
dimnames(values)[[2]][lng] <- tile.longitude
# Collect the data required to calculate the WBGT.
print("Collecting data...")
temperatures <- numeric(length(datetimes.posix))
humidities <- numeric(length(datetimes.posix))
m.winds <- numeric(length(datetimes.posix))
z.winds <- numeric(length(datetimes.posix))
radiations <- numeric(length(datetimes.posix))
i <- 1
for (year in as.character(years)) {
for (month in as.character(months)) {
for (day in as.character(days)) {
for (hour in as.character(hours)) {
temperatures[i] <- tile.hourly[year, month, day, hour, "T2M"]
humidities[i] <- tile.hourly[year, month, day, hour, "HU2M"] * 100
m.winds[i] <- tile.hourly[year, month, day, hour, "MER10M"]
z.winds[i] <- tile.hourly[year, month, day, hour, "MER10M"]
radiations[i] <- tile.hourly[year, month, day, hour, "SWD"]
i <- i + 1
}
}
}
}
# Calculate the dewpoint temperatures.
print("Calculating dewpoint temperature...")
dw_temperatures <- humidity.to.dewpoint(t = temperatures,
rh = humidities,
temperature.metric = "celsius")
# Calculate the WBGT value.
print("Calculating WBGT...")
wbgt <- wbgt.Liljegren(tas = temperatures,
dewp = dw_temperatures,
wind = sqrt(z.winds * z.winds + m.winds * m.winds),
radiation = radiations,
lon = tile.longitude,
lat = tile.latitude,
dates = datetimes.posix,
hour = TRUE)
# Keep only the maximal value per day.
daily.max <- data.frame(data_max = tapply(wbgt$data, dates, max))
# Store the value.
print("Storing values...")
for (i in 1:length(daily.max[[1]])) {
# Split the date string.
date_split <- strsplit(names(daily.max$data_max[i]), "-")[[1]]
# Get the value.
value <- daily.max$data_max[[i]]
# Append the value into the values.
values[1, 1, date_split[1], as.numeric(date_split[2]), as.character(as.numeric(date_split[3]))] <- value
}
# Cleanup the environment.
remove(tile.daily, tile.hourly, tile.latitude, tile.longitude)
}
}
save(values, file = output)
warnings()
values
values[1, 1, ]
values[1, 1, , , , ]
values[1, 1, , , , , ]
values[1, 1, , , ]
values[1, 1, , , "1"]
# Load libraries.
require(assertthat)
require(HeatStress)
require(weathermetrics)
# Configure the data.
output <- "/media/pieter/data/karel/wbgt-data.RData"
directory <- "/media/pieter/data/karel/split/"
latitudes <- 1
longitudes <- 2
# Create the datetimes.
years <- seq(1981, 2010)
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep",
"Oct", "Nov", "Dec")
days <- seq(1, 31)
hours <- seq(10, 17)
datetimes <- numeric(length(years) * length(months) * length(days) * length(hours))
i <- 1
for (year in years) {
for (month in 1:length(months)) {
for (day in days) {
for (hour in hours) {
datetimes[i] <- sprintf('%d-%02d-%02d %d:00:00', year, month, day, hour)
i <- i + 1
}
}
}
}
datetimes.posix <- as.POSIXct(strptime(datetimes, "%Y-%m-%d %H:%M:%S", tz = "GMT"))
dates <- as.character(as.Date(datetimes))
# Cleanup the environment.
remove(datetimes, day, hour, i, month, year)
# Create an array to store the calculated values in.
values <- array(data=rep(NA),
dim=c(latitudes, longitudes, length(years), length(months), length(days)))
dimnames(values)[1] <- list(as.character(seq(1:latitudes)))
dimnames(values)[2] <- list(as.character(seq(1:longitudes)))
dimnames(values)[[3]] <- as.character(years)
dimnames(values)[[4]] <- as.character(months)
dimnames(values)[[5]] <- as.character(days)
# Iterate over the latitudes.
for (lat in 1:latitudes) {
# Iterate over the longitudes.
for (lng in 1:longitudes) {
print(paste("Progress:",
((lat-1) * (longitudes)) + lng,
"/",
latitudes * longitudes)
)
# Load the corresponding tile.
load(paste(directory, lat, "_", lng, ".RData", sep=""))
dimnames(values)[[1]][lat] <- tile.latitude
dimnames(values)[[2]][lng] <- tile.longitude
# Collect the data required to calculate the WBGT.
print("Collecting data...")
temperatures <- numeric(length(datetimes.posix))
humidities <- numeric(length(datetimes.posix))
m.winds <- numeric(length(datetimes.posix))
z.winds <- numeric(length(datetimes.posix))
radiations <- numeric(length(datetimes.posix))
i <- 1
for (year in as.character(years)) {
for (month in as.character(months)) {
for (day in as.character(days)) {
for (hour in as.character(hours)) {
temperatures[i] <- tile.hourly[year, month, day, hour, "T2M"]
humidities[i] <- tile.hourly[year, month, day, hour, "HU2M"] * 100
m.winds[i] <- tile.hourly[year, month, day, hour, "MER10M"]
z.winds[i] <- tile.hourly[year, month, day, hour, "MER10M"]
radiations[i] <- tile.hourly[year, month, day, hour, "SWD"]
i <- i + 1
}
}
}
}
# Calculate the dewpoint temperatures.
print("Calculating dewpoint temperature...")
dw_temperatures <- humidity.to.dewpoint(t = temperatures,
rh = humidities,
temperature.metric = "celsius")
# Calculate the WBGT value.
print("Calculating WBGT...")
wbgt <- wbgt.Liljegren(tas = temperatures,
dewp = dw_temperatures,
wind = sqrt(z.winds * z.winds + m.winds * m.winds),
radiation = radiations,
lon = tile.longitude,
lat = tile.latitude,
dates = datetimes.posix,
hour = TRUE)
# Keep only the maximal value per day.
daily.max <- data.frame(data_max = tapply(wbgt$data, dates, max))
# Store the value.
print("Storing values...")
for (i in 1:length(daily.max[[1]])) {
# Split the date string.
date_split <- strsplit(names(daily.max$data_max[i]), "-")[[1]]
# Get the value.
value <- daily.max$data_max[[i]]
# Append the value into the values.
values[1, 1, date_split[1], as.numeric(date_split[2]), as.character(as.numeric(date_split[3]))] <- value
}
# Cleanup the environment.
remove(tile.daily, tile.hourly, tile.latitude, tile.longitude)
}
}
save(values, file = output)
values
values[1, 1, ]
values[1, 1, , , , ]
values[1, 1, , , ]
values[1, 1, , , ]
values[2, 1, , , ]
values[1, 2, , , ]
# Load libraries.
require(assertthat)
require(HeatStress)
require(weathermetrics)
# Configure the data.
output <- "/media/pieter/data/karel/wbgt-data.RData"
directory <- "/media/pieter/data/karel/split/"
latitudes <- 1
longitudes <- 2
# Create the datetimes.
years <- seq(1981, 2010)
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep",
"Oct", "Nov", "Dec")
days <- seq(1, 31)
hours <- seq(10, 17)
datetimes <- numeric(length(years) * length(months) * length(days) * length(hours))
i <- 1
for (year in years) {
for (month in 1:length(months)) {
for (day in days) {
for (hour in hours) {
datetimes[i] <- sprintf('%d-%02d-%02d %d:00:00', year, month, day, hour)
i <- i + 1
}
}
}
}
datetimes.posix <- as.POSIXct(strptime(datetimes, "%Y-%m-%d %H:%M:%S", tz = "GMT"))
dates <- as.character(as.Date(datetimes))
# Cleanup the environment.
remove(datetimes, day, hour, i, month, year)
# Create an array to store the calculated values in.
values <- array(data=rep(NA),
dim=c(latitudes, longitudes, length(years), length(months), length(days)))
dimnames(values)[1] <- list(as.character(seq(1:latitudes)))
dimnames(values)[2] <- list(as.character(seq(1:longitudes)))
dimnames(values)[[3]] <- as.character(years)
dimnames(values)[[4]] <- as.character(months)
dimnames(values)[[5]] <- as.character(days)
# Iterate over the latitudes.
for (lat in 1:latitudes) {
# Iterate over the longitudes.
for (lng in 1:longitudes) {
print(paste("Progress:",
((lat-1) * (longitudes)) + lng,
"/",
latitudes * longitudes)
)
# Load the corresponding tile.
load(paste(directory, lat, "_", lng, ".RData", sep=""))
dimnames(values)[[1]][lat] <- tile.latitude
dimnames(values)[[2]][lng] <- tile.longitude
# Collect the data required to calculate the WBGT.
print("Collecting data...")
temperatures <- numeric(length(datetimes.posix))
humidities <- numeric(length(datetimes.posix))
m.winds <- numeric(length(datetimes.posix))
z.winds <- numeric(length(datetimes.posix))
radiations <- numeric(length(datetimes.posix))
i <- 1
for (year in as.character(years)) {
for (month in as.character(months)) {
for (day in as.character(days)) {
for (hour in as.character(hours)) {
temperatures[i] <- tile.hourly[year, month, day, hour, "T2M"]
humidities[i] <- tile.hourly[year, month, day, hour, "HU2M"] * 100
m.winds[i] <- tile.hourly[year, month, day, hour, "MER10M"]
z.winds[i] <- tile.hourly[year, month, day, hour, "MER10M"]
radiations[i] <- tile.hourly[year, month, day, hour, "SWD"]
i <- i + 1
}
}
}
}
# Calculate the dewpoint temperatures.
print("Calculating dewpoint temperature...")
dw_temperatures <- humidity.to.dewpoint(t = temperatures,
rh = humidities,
temperature.metric = "celsius")
# Calculate the WBGT value.
print("Calculating WBGT...")
wbgt <- wbgt.Liljegren(tas = temperatures,
dewp = dw_temperatures,
wind = sqrt(z.winds * z.winds + m.winds * m.winds),
radiation = radiations,
lon = tile.longitude,
lat = tile.latitude,
dates = datetimes.posix,
hour = TRUE)
# Keep only the maximal value per day.
daily.max <- data.frame(data_max = tapply(wbgt$data, dates, max))
# Store the value.
print("Storing values...")
for (i in 1:length(daily.max[[1]])) {
# Split the date string.
date_split <- strsplit(names(daily.max$data_max[i]), "-")[[1]]
# Get the value.
value <- daily.max$data_max[[i]]
# Append the value into the values.
values[tile.longitude, tile.latitude, date_split[1], as.numeric(date_split[2]), as.character(as.numeric(date_split[3]))] <- value
}
# Cleanup the environment.
remove(tile.daily, tile.hourly, tile.latitude, tile.longitude)
}
}
# Load libraries.
require(assertthat)
require(HeatStress)
require(weathermetrics)
# Configure the data.
output <- "/media/pieter/data/karel/wbgt-data.RData"
directory <- "/media/pieter/data/karel/split/"
latitudes <- 1
longitudes <- 2
# Create the datetimes.
years <- seq(1981, 2010)
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep",
"Oct", "Nov", "Dec")
days <- seq(1, 31)
hours <- seq(10, 17)
datetimes <- numeric(length(years) * length(months) * length(days) * length(hours))
i <- 1
for (year in years) {
for (month in 1:length(months)) {
for (day in days) {
for (hour in hours) {
datetimes[i] <- sprintf('%d-%02d-%02d %d:00:00', year, month, day, hour)
i <- i + 1
}
}
}
}
datetimes.posix <- as.POSIXct(strptime(datetimes, "%Y-%m-%d %H:%M:%S", tz = "GMT"))
dates <- as.character(as.Date(datetimes))
# Cleanup the environment.
remove(datetimes, day, hour, i, month, year)
# Create an array to store the calculated values in.
values <- array(data=rep(NA),
dim=c(latitudes, longitudes, length(years), length(months), length(days)))
dimnames(values)[1] <- list(as.character(seq(1:latitudes)))
dimnames(values)[2] <- list(as.character(seq(1:longitudes)))
dimnames(values)[[3]] <- as.character(years)
dimnames(values)[[4]] <- as.character(months)
dimnames(values)[[5]] <- as.character(days)
# Iterate over the latitudes.
for (lat in 1:latitudes) {
# Iterate over the longitudes.
for (lng in 1:longitudes) {
print(paste("Progress:",
((lat-1) * (longitudes)) + lng,
"/",
latitudes * longitudes)
)
# Load the corresponding tile.
load(paste(directory, lat, "_", lng, ".RData", sep=""))
dimnames(values)[[1]][lat] <- tile.latitude
dimnames(values)[[2]][lng] <- tile.longitude
# Collect the data required to calculate the WBGT.
print("Collecting data...")
temperatures <- numeric(length(datetimes.posix))
humidities <- numeric(length(datetimes.posix))
m.winds <- numeric(length(datetimes.posix))
z.winds <- numeric(length(datetimes.posix))
radiations <- numeric(length(datetimes.posix))
i <- 1
for (year in as.character(years)) {
for (month in as.character(months)) {
for (day in as.character(days)) {
for (hour in as.character(hours)) {
temperatures[i] <- tile.hourly[year, month, day, hour, "T2M"]
humidities[i] <- tile.hourly[year, month, day, hour, "HU2M"] * 100
m.winds[i] <- tile.hourly[year, month, day, hour, "MER10M"]
z.winds[i] <- tile.hourly[year, month, day, hour, "MER10M"]
radiations[i] <- tile.hourly[year, month, day, hour, "SWD"]
i <- i + 1
}
}
}
}
# Calculate the dewpoint temperatures.
print("Calculating dewpoint temperature...")
dw_temperatures <- humidity.to.dewpoint(t = temperatures,
rh = humidities,
temperature.metric = "celsius")
# Calculate the WBGT value.
print("Calculating WBGT...")
wbgt <- wbgt.Liljegren(tas = temperatures,
dewp = dw_temperatures,
wind = sqrt(z.winds * z.winds + m.winds * m.winds),
radiation = radiations,
lon = tile.longitude,
lat = tile.latitude,
dates = datetimes.posix,
hour = TRUE)
# Keep only the maximal value per day.
daily.max <- data.frame(data_max = tapply(wbgt$data, dates, max))
# Store the value.
print("Storing values...")
for (i in 1:length(daily.max[[1]])) {
# Split the date string.
date_split <- strsplit(names(daily.max$data_max[i]), "-")[[1]]
# Get the value.
value <- daily.max$data_max[[i]]
# Append the value into the values.
values[lat, lng, date_split[1], as.numeric(date_split[2]), as.character(as.numeric(date_split[3]))] <- value
}
# Cleanup the environment.
remove(tile.daily, tile.hourly, tile.latitude, tile.longitude)
}
}
values[1, 2, , , ]
values[1, 1, , , ]
setwd("~/Documenten/thesis/paper/assets/charts")
data <- read.csv("test-durations.csv", header = FALSE)
plot(c(1:5), c(1:5))
boxplot(data,
horizontal=TRUE,
notch=TRUE,
main = "Execution time of a test suite",
xlab = "Duration in s")
